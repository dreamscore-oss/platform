openapi: 3.0.1
info:
  title: Swagger Petclinic
  description: "This is a sample server Petclinic server.  You can find out more about\
    \ Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).\
    \  For this sample, you can use the api key `special-key` to test the authorization\
    \ filters."
  termsOfService: http://swagger.io/terms/
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.6
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: https://petclinic.swagger.io/v2
  - url: http://petclinic.swagger.io/v2
tags:
  - name: pet
    description: Everything about your Pets
    externalDocs:
      description: Find out more
      url: http://swagger.io
paths:
  /pet/{petId}/uploadImage:
    post:
      tags:
        - pet
      summary: uploads an image
      operationId: uploadFile
      parameters:
        - name: petId
          in: path
          description: ID of pet to update
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                additionalMetadata:
                  type: string
                  description: Additional data to pass to server
                file:
                  type: string
                  description: file to upload
                  format: binary
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ModelApiResponse"
      security:
        - petclinic_auth:
            - write:pets
            - read:pets
  /pet:
    put:
      tags:
        - pet
      summary: Update an existing pet
      operationId: updatePet
      requestBody:
        description: Pet object that needs to be added to the clinic
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PetDto"
          application/xml:
            schema:
              $ref: "#/components/schemas/PetDto"
        required: true
      responses:
        "400":
          description: Invalid ID supplied
          content: {}
        "404":
          description: Pet not found
          content: {}
        "405":
          description: Validation exception
          content: {}
      security:
        - petclinic_auth:
            - write:pets
            - read:pets
      x-codegen-request-body-name: body
    post:
      tags:
        - pet
      summary: Add a new pet to the clinic
      operationId: addPet
      requestBody:
        description: Pet object that needs to be added to the clinic
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PetDto"
          application/xml:
            schema:
              $ref: "#/components/schemas/PetDto"
        required: true
      responses:
        "405":
          description: Invalid input
          content: {}
      security:
        - petclinic_auth:
            - write:pets
            - read:pets
      x-codegen-request-body-name: body
  /pet/findByStatus:
    get:
      tags:
        - pet
      summary: Finds Pets by status
      description: Multiple status values can be provided with comma separated strings
      operationId: findPetsByStatus
      parameters:
        - name: status
          in: query
          description: Status values that need to be considered for filter
          required: true
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
              default: available
              enum:
                - available
                - pending
                - sold
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PetDto"
            application/xml:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PetDto"
        "400":
          description: Invalid status value
          content: {}
      security:
        - petclinic_auth:
            - write:pets
            - read:pets
  /pet/{petId}:
    get:
      tags:
        - pet
      summary: Find pet by ID
      description: Returns a single pet
      operationId: getPetById
      parameters:
        - name: petId
          in: path
          description: ID of pet to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PetDto"
            application/xml:
              schema:
                $ref: "#/components/schemas/PetDto"
        "400":
          description: Invalid ID supplied
          content: {}
        "404":
          description: PetDto not found
          content: {}
      security:
        - api_key: []
    post:
      tags:
        - pet
      summary: Updates a pet in the clinic with form data
      operationId: updatePetWithForm
      parameters:
        - name: petId
          in: path
          description: ID of pet that needs to be updated
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: Updated name of the pet
                status:
                  type: string
                  description: Updated status of the pet
      responses:
        "405":
          description: Invalid input
          content: {}
      security:
        - petclinic_auth:
            - write:pets
            - read:pets
    delete:
      tags:
        - pet
      summary: Deletes a pet
      operationId: deletePet
      parameters:
        - name: api_key
          in: header
          schema:
            type: string
        - name: petId
          in: path
          description: Pet id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "400":
          description: Invalid ID supplied
          content: {}
        "404":
          description: Pet not found
          content: {}
      security:
        - petclinic_auth:
            - write:pets
            - read:pets
components:
  schemas:
    ModelApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
    PetDto:
      required:
        - name
      type: object
      properties:
        id:
          type: integer
          format: int64
        user:
          $ref: "#/components/schemas/UserDto"
        name:
          type: string
          example: doggie
        visits:
          type: array
          xml:
            wrapped: true
          items:
            $ref: "#/components/schemas/VisitDto"
      xml:
        name: PetDto
    VisitDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        date:
          type: string
          format: date-time
        veterinarianName:
          type: string
        clinicName:
          type: string
      xml:
        name: VisitDto
    UserDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        password:
          type: string
        phone:
          type: string
        userStatus:
          type: integer
          description: User Status
          format: int32
      xml:
        name: UserDto
  securitySchemes:
    api_key:
      type: apiKey
      name: api_key
      in: header
    petclinic_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://petclinic.swagger.io/oauth/authorize
          scopes:
            read:pets: read your pets
            write:pets: modify pets in your account
x-original-swagger-version: "2.0"
